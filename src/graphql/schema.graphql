type Query {
  users: [User!]!
  # expences(userId: ID!): [Expence!]!
  currentMonthMoneyIn(id: ID!): Float!
  currentMonthMoneyOut(id: ID!): Float!
}

type Mutation {
  registerUser(data: RegisterUserInput!): User!
  loginUser(data: LoginUserInput!): JwtToken!

  createExpence(data: CreateExpenceInput!): Expence!
  deleteExpence(id: ID!): Expence!
  updateExpence(id: ID!, data: UpdateExpenceInput): Expence!
}

input RegisterUserInput {
  username: String!
  email: String!
  password: String
}

input LoginUserInput {
  username: String!
  password: String!
}

type JwtToken {
  token: String!
}

input CreateExpenceInput {
  title: String!
  moneyStatus: ExpenceType!
  transactionAmount: Int!
  date: String!
}

input UpdateExpenceInput {
  title: String
  moneyStatus: ExpenceType
  transactionAmount: Int
  date: String
}

type User {
  id: ID!
  username: String!
  email: String!
  password: String!
  expence: [Expence!]!
}

enum ExpenceType {
  MONEYIN
  MONEYOUT
}

type Expence {
  id: ID!
  title: String!
  moneyStatus: ExpenceType!
  transactionAmount: Int!
  date: String!
  author: User!
}

# type Query {
#   me: User!
#   post: Post!
#   users(query: String): [User!]!
#   posts(query: String): [Post!]!
#   comments: [Comment!]!
# }

# type Mutation {
#   createUser(data: CreateUserInput!): User!
#   deleteUser(id: ID!): User!
#   updateUser(id: ID!, data: UpdateUserInput!): User!

#   createPost(data: CreatePostInput!): Post!
#   deletePost(id: ID!): Post!
#   updatePost(id: ID!, data: UpdatePostInput!): Post!

#   createComment(data: CreateCommentInput!): Comment!
#   deleteComment(id: ID!): Comment!
#   updateComment(id: ID!, data: UpdateCommentInput!): Comment!
# }

# input CreateUserInput {
#   name: String!
#   email: String!
#   age: Int!
# }

# input UpdateUserInput {
#   name: String
#   email: String
#   age: Int
# }

# input CreatePostInput {
#   title: String!
#   body: String!
#   published: Boolean!
#   author: ID!
# }

# input UpdatePostInput {
#   title: String
#   body: String
#   published: Boolean
# }

# input CreateCommentInput {
#   text: String!
#   author: ID!
#   post: ID!
# }

# input UpdateCommentInput {
#   text: String
# }

# type User {
#   id: ID!
#   name: String!
#   email: String!
#   age: Int!
#   posts: [Post!]!
#   comments: [Comment!]!
# }

# type Post {
#   id: ID!
#   title: String!
#   body: String!
#   published: Boolean!
#   author: User!
#   comments: [Comment!]!
# }

# type Comment {
#   id: ID!
#   text: String!
#   author: User!
#   post: Post!
# }
